import soundProducer.*
import wollok.game.*
import tablero.*
import direcciones.*
import personajes.*
import ataques.*

describe "configuracionBoard" {
	test "ubicacion esta en el board" {
		assert.that(configuracionBoard.estaEnElBoard(game.at(configuracionBoard.anchoBoard() - 1, configuracionBoard.altoBoard() - 2)))
	}
	test "ubicacion no esta en el board" {
		assert.notThat(configuracionBoard.estaEnElBoard(game.at(configuracionBoard.anchoBoard() - 1, configuracionBoard.altoBoard() - 1)))
	}
}

// testea solo izquierda
describe "objetos direcciones"{
	var posicion = game.at(1,2)
	var posicionSiguiente = game.at(0,2)
	var posicionAlBorde = game.at(2, configuracionBoard.altoBoard() - 1)
	test "devuelve direccion siguiente si no se pasa del board"{
		assert.equals(izquierda.proximaPosicion(posicion), posicionSiguiente)
	}
	test "devuelve direccion actual si se pasa del board"{
		assert.equals(arriba.proximaPosicion(posicionAlBorde), posicionAlBorde)
	}
}

describe "Personajes" {
	const soldadoNazi = new Personaje(rangoMaximoMovimiento = 2, image = "soldadoNazi.png", vida = 100)
	const pepita = new Personaje(rangoMaximoMovimiento =4, image = "pepita.png", vida = 150)
	
	method initialize() {
		game.addVisual(pepita)
		game.addVisual(soldadoNazi)
	} 
	
	test "Personaje que puede recibir da√±o" {
		soldadoNazi.recibirDanio(50)
		assert.equals(50, soldadoNazi.vida())
	}
	
	test "Personaje que se muere al descontar todos sus puntos de vida" {
		pepita.recibirDanio(150)
		assert.equals(0, pepita.vida())
		assert.notThat(game.hasVisual(pepita))
	}
}

/*describe "Al matar un personaje, se lo elimina del oponente"{
	
}
*/

