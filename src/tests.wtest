import soundProducer.*
import wollok.game.*
import tablero.*
import direcciones.*
import personajes.*
import ataques.*
import jugadores.*

describe "configuracionBoard" {
	test "ubicacion esta en el board" {
		assert.that(configuracionBoard.estaEnElBoard(game.at(configuracionBoard.anchoBoard() - 1, configuracionBoard.altoBoard() - 2)))
	}
	test "ubicacion no esta en el board" {
		assert.notThat(configuracionBoard.estaEnElBoard(game.at(configuracionBoard.anchoBoard() - 1, configuracionBoard.altoBoard() - 1)))
	}
}

// testea solo izquierda
describe "objetos direcciones"{
	var posicion = game.at(1,2)
	var posicionSiguiente = game.at(0,2)
	var posicionAlBorde = game.at(2, configuracionBoard.altoBoard() - 1)
	test "devuelve direccion siguiente si no se pasa del board"{
		assert.equals(izquierda.proximaPosicion(posicion), posicionSiguiente)
	}
	test "devuelve direccion actual si se pasa del board"{
		assert.equals(arriba.proximaPosicion(posicionAlBorde), posicionAlBorde)
	}
}

describe "Personajes" {
	const soldadoNazi = new Personaje(rangoMaximoMovimiento = 2, position = game.at(0,8), image = "soldadoNazi.png", vida = 100, jugador = new Jugador(personajes = [soldadoNazi]), ataques = [new GomeraDePiedras()])
	const healer = new Personaje(rangoMaximoMovimiento = 5, image = "healer.png", position = game.at(0, 10), vida = 50, jugador = new Jugador(personajes = [healer]), ataques = [new GomeraCuradora()])
	const pepita = new Personaje(rangoMaximoMovimiento = 4, image = "pepita.png", position = game.at(0, 9), vida = 150, jugador = new Jugador(personajes = [pepita, healer]))
	
	method initialize() {
		game.addVisual(pepita)
		game.addVisual(soldadoNazi)
		game.addVisual(healer)
		game.addVisual(cursor)
	} 
	
	test "Personaje que puede recibir daño de otro personaje" {
		cursor.position(game.at(0,9))
		soldadoNazi.ataque(1).atacante(soldadoNazi)
		soldadoNazi.ataque(1).realizarEfectoAtaque(game.at(0,9)) // donde está pepita
		assert.equals(120, pepita.vida())
	}
	
	test "Personaje que se muere al descontar todos sus puntos de vida" {
		pepita.recibirDanio(150)
		assert.equals(0, pepita.vida())
		assert.notThat(game.hasVisual(pepita))
		assert.notThat(pepita.jugador().esDeJugador(pepita))
	}
}

describe "ataques"{
	var gomeraDePiedras = new GomeraDePiedras()
	var gomeraCuradora= new GomeraCuradora()
	const atacante = new Personaje(rangoMaximoMovimiento = 2, image = "soldadoNazi.png", position = game.at(7,7), vida = 100, ataques = [gomeraDePiedras, gomeraCuradora])
	const atacado = new Personaje(rangoMaximoMovimiento = 2, image = "soldadoNazi.png", position = game.at(7,6), vida = 70, ataques = [])
	const curado = new Personaje(rangoMaximoMovimiento = 2, image = "soldadoNazi.png", position = game.at(6,6), vida = 70, ataques = [])
	
	// ya se que repite codigo y podria haber hecho un initialize, pero con el initialize me daba error, creo que wollok game no se resetea despues de cada test o algo asi
	
	test "se puede seleccionar el ataque"{
		tablero.configurarCasillas()
		game.addVisual(cursor)
		game.addVisual(atacante)
		7.times({i => cursor.mover(derecha)})
		7.times({i => cursor.mover(arriba)})
		cursor.seleccionarAtaque(1)
		assert.equals(gomeraDePiedras.atacante(), atacante)
		assert.equals(cursor.ataqueSeleccionado(), gomeraDePiedras)
	}
	test "GomeraDePiedras hace su efecto. Los Personajes reciben danio."{
		tablero.configurarCasillas()
		game.addVisual(cursor)
		game.addVisual(atacado)
		game.addVisual(atacante)
		7.times({i => cursor.mover(derecha)})
		6.times({i => cursor.mover(arriba)})
		// estas proximas dos lineas son lo mismo que cursor.seleccionarAtaque(1), lo que testea el test anterior
		gomeraDePiedras.marcarComoSeleccionado(atacante)
		cursor.ataqueSeleccionado(gomeraDePiedras)
		cursor.atacar()
		assert.equals(cursor.ataqueSeleccionado(), ningunAtaque)
		assert.equals(atacado.vida(), 70 - gomeraDePiedras.danio())
	}
	test "GomeraCuradora hace su efecto. Los Personajes se curan."{
		tablero.configurarCasillas()
		game.addVisual(cursor)
		game.addVisual(curado)
		game.addVisual(atacante)
		6.times({i => cursor.mover(derecha)})
		6.times({i => cursor.mover(arriba)})
		// estas proximas dos lineas son lo mismo que cursor.seleccionarAtaque(1), lo que testea el test anterior
		gomeraCuradora.marcarComoSeleccionado(atacante)
		cursor.ataqueSeleccionado(gomeraCuradora)
		cursor.atacar()
		assert.equals(cursor.ataqueSeleccionado(), ningunAtaque)
		assert.equals(curado.vida(), 70 + gomeraCuradora.curacion())
	}
	// lo de los casilleros atacables testearlo a mano, es mas intuitivo que estar viendo que de bien la lista de coordenadas.
}

/*describe "Al matar un personaje, se lo elimina del oponente"{
	
}
*/

